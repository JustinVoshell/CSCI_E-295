# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.


GMOCK_DIR = /usr/local/gmock-1.6.0

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(GMOCK_DIR)/gtest


CC = gcc
CPP = g++
LEX = flex
YACC = bison

CFLAGS += -g -Wall -Wextra 

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(GMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

LFLAGS += 
YFLAGS += -d

LINK.o = $(CXX) $(LDFLAGS) $(TARGET_ARCH)
LDLIBS += -lfl -ly -lpthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = scanner_test parser_test

EXECS = scanner_main parser_main
# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition. 
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# House-keeping build targets.

all : $(EXECS)

test : $(TESTS)
	./scanner_test
	./parser_test

clean :
	rm -f $(TESTS) $(EXECS) gmock.a gmock_main.a *.o scanner.c parse.c parse.output parse.h

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^




%.c : %.l
	$(LEX) $(LFLAGS) -o $@ $<

%.c : %.y
	$(YACC) $(YFLAGS) -o $@ $<

scanner.o : scanner.c scanner_tokens.h node.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -D__SCANNER -c $< -o $@ 

scanner_for_parser.o : scanner.c scanner_tokens.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -D__PARSER -c $< -o $@ 

scanner_tokens.o : scanner_tokens.c scanner_tokens.h

scanner_test.o : scanner_test.cpp node.h $(GMOCK_HEADERS)

scanner_test : scanner.o scanner_test.o node.o gmock_main.a

scanner_main.o : scanner_main.c node.h

node.o : node.c node.h

scanner_main : scanner_main.o scanner.o scanner_tokens.o node.o

parse.o : parse.c node.h

parser_main.o : parser_main.c node.h

parser_main : parser_main.o parse.o scanner_for_parser.o node.o

parser_test.o : parser_test.cpp parse.c node.h $(GMOCK_HEADERS)

parser_test : parser_test.o parse.o node.o gmock_main.a
