			Last revised 13-Feb-12

			    Problem Set 1

		 Harvard Extension School CSCI E-295:
	   Compiler Design and Implementation - Spring 2012

		 Due: Midnight on February 10, 2012

1. (100 Points) Using either ad hoc techniques or a lexical-analyzer
generator such as Lex or Flex, write a lexer to return tokens from an
input stream.  The tokens to be recognized include identifiers,
reserved words, operators, separators, and constants.  Our tokens are
taken from a simplified version of the ISO C language.

The accepted input character set is composed of the 52 upper case and
lower case alphabetic characters; the 10 decimal digits; the space,
horizontal tab, vertical tab, and form feed characters; the 29
graphic characters below; the new line character; the 3 extra graphic
characters dollar sign, at-sign, and accent grave.

An implementation that is targeted towards Windows in addition to
Unix/Linux may decide to accept carriage return as an additional
acceptable character in the input character set.  A Windows
implementation should accept carriage return followed by new line as
an acceptable end-of-line character.  In any case, all implementations
must accept a new line character by itself as a valid end-of-line
character.  If a carriage return is encountered without a following
new line character, an error should be emitted.

Graphic characters:
	exclamation point	plus			double quote
	number sign		equal			left brace
	percent			tilde			right brace
	cicumflex		left bracket		comma
	ampersand		right bracket		period
	asterisk		backslash		less than
	left parenthesis	vertical bar		greater than
	right parenthesis	semicolon		slash
	hyphen or minus		colon			question mark
	underscore		apostrophe

Whitespace is defined as any sequence of the blank (space), new line,
vertical tab, form feed, and horizontal tab characters.

Comments are delimited by /* and */.  They are ignored by the lexer and are
not returned as tokens.

A token returned by the lexer is always the longest possible recognizable
valid sequence of characters

An identifier is a sequence of letters, digits, and underscores.  An
identifier must not begin with a digit, and it must not have the same
spelling as a reserved word.

The reserved words are:
             do		for	return
    break       		short
             else	goto	signed		unsigned
    char		if			void
                 	int
    continue    	long			while

The operators and separators are:
    simple operators:	           !   %   ^   &   *   -   +   =
			           ~   |       <   >   /   ?
    compound assignment operators: +=  -=  *=  /=  %=
				   <<= >>= &=  ^=  |=
    other compound operators:	       ++  --  <<  >>
				   <=  >=  ==  !=  &&  ||
    other separator characters:	   (   )   [   ]   {   }   ,   ;   :

The constants (also known as literals) are integers, characters, and
strings.  We will not accept floating-point constants.  The integers
may be only decimal (we will not accept octal or hexadecimal integer
constants).  Note that a constant composed of a single '0' digit will
be deemed to be an acceptable integer constant; a single '0' digit
would otherwise be an octal integer constant.  We will not accept any
integer suffixes (l, L, ll, LL, u, or U).  A character constant is a
single character enclosed within single quotes.  A string constant is
a sequence of characters enclosed within double quotes.  Within
character and string constants, we will accept characters in backslash
notation -- so called escape codes.  In particular, we will allow only
octal and character escape codes in our language.  Octal escape codes
may be one, two, or three octal digits in length.  Character escape
code may be n, t, b, r, f, v, \, ', ", a, and ?.

Our subset implementation of the C Programming Language will most
closely follow the Standard C 1989 (also known as "C89").  Please
refer to Harbison and Steele, C: A Reference Manual, Fifth Edition for
additional details of the language.

In order to correctly parse decimal integer constants, it is necessary
to know the size of the types of integer constants.  This is required
to be able to determine whether an integer constant is of type int,
long, or unsigned long (see Harbison and Steele, Section 2.7.1 and
Table 2-5).  For our implementation, we will use the following sizes
for types:

    Type    Size in bytes
    ----    -------------
    char    1
    short   2
    int	    4
    long    4

If you are writing your lexer using ad hoc techniques, your program
should appear to be a C function or C++ member function.  On each call
it should read the minimum number of characters to be able to
recognize and return a single token (of course, that token should be
composed of the maximum number of characters from the input stream
that can form a valid token).  The function should return a boolean
indicating whether the function successfully found a token (or was at
end-of-input).  Through parameters, the function should return an
enumerated type indicating the type of token found (identifier,
reserved word, or operator) and the token as a string.  If the token
is either a reserved word or an operator, an additional enumerated
type will indicate which reserved word or operator was found.  If the
token is a constant, an additional enumerated type will indicate the
type of constant and an additional return value will contain the value
of the constant.

If you are using a lexical-analyzer generator, you should use the
generated yylex function as your interface to the lexer.  The lexer
should make available to the caller all the other information
stipulated in the paragraph above by using facilities provided by the
lexical-analyzer generator.  For example, in Lex, the code in the
"rules" section should return the token name/value that will be
defined in the input file to Yacc as a %token.  Before integrating
with Yacc, the values of the token names can be defined in an
appropriate header (i.e., .h file).  The token name/value is the value
that Yacc will use to match against the token name specified in the
body of a Yacc translation rule.  All other information should be
returned via yylval which is accessible in Yacc via $<i>, the
attribute associated with the <i>th grammar symbol in the body of a
translation rule.

Your lexer must be able to keep track of the line number from which
input is being read.  This is important in order to identify the line
number where errors are detected.  Any errors must be identified with
the approximate line number in the input stream where the error was
found.  As noted above, the end-of-line character sequence is either a
new line or a carriage return followed by a new line (in
implementations that are compatible with Windows line termination
characters).

Keep in mind that, in addition to correctness, your grade for this
assignment will include points for style.  You must include a makefile
to build your application and a test program that invokes your
function and displays the stream of tokens that are returned.  You
should include sample test program(s) and output that shows that you
have tested your function with a wide variety of possible input.  The
output that you produce for this test program must be formatted to be
easy to read.  See the course syllabus for more information.
